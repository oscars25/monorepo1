# =========================================================
# üí¨ Chat Widget Backend - Configuraci√≥n principal (Docker)
# =========================================================

spring.application.name=chat-widget-backend

# ==============================
# üóÑÔ∏è BASE DE DATOS (PostgreSQL)
# ==============================
# Estas variables se inyectan desde docker-compose.yml
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/chatwidget}
spring.datasource.username=${DATABASE_USERNAME:postgres}
spring.datasource.password=${DATABASE_PASSWORD:postgres}
spring.datasource.driver-class-name=org.postgresql.Driver

# üîß Configuraci√≥n JPA / Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# üëá Esta l√≠nea soluciona el error ‚ÄúUnable to determine Dialect‚Äù
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ==================================================
# üîê JWT (JSON Web Token)
# ==================================================
# Puedes sobreescribirlas desde docker-compose.yml
jwt.secret=${JWT_SECRET:mi_secreto_muy_secreto_y_seguro_1234567890}
jwt.expiration=${JWT_EXPIRATION:86400000}

# ==================================================
# üåç CORS / WebSocket / Seguridad
# ==================================================
spring.web.cors.allowed-origins=*
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*

# Configuraci√≥n WebSocket
spring.websocket.task-executor.core-pool-size=4
spring.websocket.task-executor.max-pool-size=10
spring.websocket.task-executor.queue-capacity=100

# ==================================================
# üß± SQL Init y perfiles
# ==================================================
spring.sql.init.mode=never
spring.profiles.active=${SPRING_PROFILES_ACTIVE:prod}

